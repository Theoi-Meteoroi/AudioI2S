clc
clear all
close all

pkg load signal

%% Read Equalisation file
Equalisation = csvread("../Filter_Equalization.csv");

freq_equalization_read = real(Equalisation)';
freq_equalization = freq_equalization_read(2:end);
ampl_equalization_read = imag(Equalisation)';
ampl_equalization = ampl_equalization_read(2:end);

%% AUTO-GENERATED H FILES
%H
filename = "../../lib/AudioAnalysis/EqualisationCoefficients/equalisation_coeffs.h";
fid = fopen (filename, "w");
fputs (fid, disp("//This file is automatically generated by the .m file in the OCTAVE folder"));
fputs (fid, disp("#pragma once"));
fputs (fid, disp("#ifndef __EQ_COEFFS__"));
fputs (fid, disp("#define __EQ_COEFFS__"));
fputs (fid, disp(""));
fputs (fid, ("#define EQ_COEFFS_LEN  "));
fputs (fid, disp(num2str(length(ampl_equalization))));
fputs (fid, disp(""));
fputs (fid, disp("const uint8_t EQSIZE = EQ_COEFFS_LEN;"));
fputs (fid, disp(""));
fputs (fid, ("#define EQUALTABLECOEFFS {"));

for i = 1:1:length(ampl_equalization)
  fputs (fid, num2str(ampl_equalization(i)));
  if i < length(ampl_equalization)
    fputs (fid, (","));
  endif
end

fputs(fid, disp("};"));
fputs (fid, disp(""));
fputs (fid, disp("const double EQUALISATION_TABLE[] = EQUALTABLECOEFFS;"));
fputs (fid, disp("#endif"));
fclose (fid);

disp("Export done");

figure;

plot(freq_equalization,ampl_equalization);
grid